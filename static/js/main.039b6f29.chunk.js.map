{"version":3,"sources":["components/card/card.js","components/counter/counter.js","components/gameboard/gameboard.js","components/startpage/startpage.js","components/gamewon/gamewon.js","components/deck/deck.js","serviceWorker.js","index.js","MemoryGame.js"],"names":["Card","_ref","handleCardClick","id","type","clicked","solved","height","width","disabled","react_default","a","createElement","className","concat","style","onClick","src","alt","Counter","numMatches","GameBoard","dimension","cards","map","card","Object","assign","key","includes","StartPage","handleStartClick","GameWon","handlePlayAgainClick","href","target","shuffleCards","array","myArray","i","length","randomIndex","Math","floor","random","temporary","shuffle","reduce","push","Boolean","window","location","hostname","match","ReactDOM","render","_useState","useState","_useState2","slicedToArray","setCards","_useState3","_useState4","setClicked","_useState5","_useState6","setSolved","_useState7","_useState8","setDimension","_useState9","_useState10","setDisabled","_useState11","_useState12","started","setStarted","_useState13","_useState14","setNumMatches","useEffect","min","document","documentElement","clientWidth","clientHeight","sameCardClicked","isMatch","clickedCardOne","find","clickedCardTwo","toConsumableArray","resetCards","reload","setTimeout","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.039b6f29.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./card.css\";\n\nexport default function Card({\n  handleCardClick,\n  id,\n  type,\n  clicked,\n  solved,\n  height,\n  width,\n  disabled\n}) {\n  return (\n    <div\n      className={`card-container ${clicked ? \"clicked\" : \"\"}`}\n      style={{\n        width,\n        height\n      }}\n      onClick={() => (disabled ? null : handleCardClick(id))}\n    >\n      <div className=\"flipper\">\n        <img\n          style={{\n            width,\n            height\n          }}\n          className={clicked ? \"front\" : \"back\"}\n          src={clicked || solved ? `/img/${type}.png` : `/img/back.png`}\n          alt={clicked || solved ? `SDG-goal` : `SDG-ring`}\n        />\n      </div>\n    </div>\n  );\n}\n\nCard.propTypes = {\n  handleCardClick: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n  clicked: PropTypes.bool.isRequired,\n  solved: PropTypes.bool.isRequired,\n  type: PropTypes.string.isRequired,\n  height: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  disabled: PropTypes.bool.isRequired\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./counter.css\";\n\nexport default function Counter({ numMatches }) {\n  return (\n    <div className=\"counter-box\">\n      <div className=\"container\">\n        <h3>Solved:</h3>\n        <p>{numMatches} out of 17</p>\n      </div>\n    </div>\n  );\n}\n\nCounter.propTypes = {\n  numMatches: PropTypes.number.isRequired\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Card from \"../card/card.js\";\nimport Counter from \"../counter/counter.js\";\nimport \"./gameboard.css\";\n\nexport default function GameBoard({\n  dimension,\n  cards,\n  clicked,\n  solved,\n  handleCardClick,\n  disabled,\n  numMatches\n}) {\n  return (\n    <div\n      className=\"board\"\n      style={{\n        width: dimension,\n        height: dimension\n      }}\n    >\n      {cards.map(card => (\n        <Card\n          key={card.id}\n          width={dimension / 7}\n          height={dimension / 7}\n          handleCardClick={handleCardClick}\n          clicked={clicked.includes(card.id)}\n          solved={solved.includes(card.id)}\n          disabled={disabled || solved.includes(card.id)}\n          {...card}\n        />\n      ))}\n      <Counter numMatches={numMatches} />\n    </div>\n  );\n}\n\nGameBoard.propTypes = {\n  dimension: PropTypes.number.isRequired,\n  cards: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  clicked: PropTypes.arrayOf(PropTypes.number).isRequired,\n  solved: PropTypes.arrayOf(PropTypes.number).isRequired,\n  handleCardClick: PropTypes.func.isRequired,\n  disabled: PropTypes.bool.isRequired,\n  numMatches: PropTypes.number.isRequired\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./startpage.css\";\n\nexport default function StartPage({ handleStartClick }) {\n  return (\n    <div>\n      <h1>The Sustainable Development Goals - MEMORY GAME</h1>\n      <img className=\"logo\" src={`/img/SDG_wheel.png`} alt=\"SDG-logo\" />\n      <h2 />\n      <button className=\"start-button\" onClick={() => handleStartClick()}>\n        <p>Start</p>\n      </button>\n    </div>\n  );\n}\n\nStartPage.propTypes = {\n  handleStartClick: PropTypes.func.isRequired\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./gamewon.css\";\n\nexport default function GameWon({ handlePlayAgainClick }) {\n  return (\n    <div>\n      <h1>CONGRATULATIONS</h1>\n      <img className=\"logo\" src={`/img/SDG_wheel.png`} alt=\"SDG-logo\" />\n      <h2 />\n      <button\n        className=\"play-again-button\"\n        onClick={() => handlePlayAgainClick()}\n      >\n        <p>Play Again</p>\n      </button>\n      <p>\n        <a href=\"https://sustainabledevelopment.un.org\" target=\"_blank\">\n          Click Here to learn more about the Sustianable Development Goals\n        </a>\n      </p>\n    </div>\n  );\n}\n\nGameWon.propTypes = {\n  handlePlayAgainClick: PropTypes.func.isRequired\n};\n","function shuffle(array) {\n  const myArray = array;\n  for (let i = 0; i < array.length; i++) {\n    let randomIndex = Math.floor(Math.random() * (i + 1));\n    let temporary = myArray[i];\n    myArray[i] = myArray[randomIndex];\n    myArray[randomIndex] = temporary;\n  }\n  return myArray;\n}\n\nexport default function shuffleCards() {\n  let id = 0;\n  const cards = [\n    \"01\",\n    \"02\",\n    \"03\",\n    \"04\",\n    \"05\",\n    \"06\",\n    \"07\",\n    \"08\",\n    \"09\",\n    \"10\",\n    \"11\",\n    \"12\",\n    \"13\",\n    \"14\",\n    \"15\",\n    \"16\",\n    \"17\"\n  ].reduce((a, type) => {\n    a.push({\n      id: id++,\n      type\n    });\n    a.push({\n      id: id++,\n      type\n    });\n    return a;\n  }, []);\n\n  return shuffle(cards);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport MemoryGame from \"./MemoryGame\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<MemoryGame />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n","import React, { useState, useEffect } from \"react\";\nimport GameBoard from \"./components/gameboard/gameboard.js\";\nimport StartPage from \"./components/startpage/startpage.js\";\nimport GameWon from \"./components/gamewon/gamewon.js\";\nimport shuffleCards from \"./components/deck/deck.js\";\n\nexport default function MemoryGame() {\n  const [cards, setCards] = useState([]);\n  const [clicked, setClicked] = useState([]);\n  const [solved, setSolved] = useState([]);\n  const [dimension, setDimension] = useState(0);\n  const [disabled, setDisabled] = useState(false);\n  const [started, setStarted] = useState(false);\n  const [numMatches, setNumMatches] = useState(0);\n\n  useEffect(() => {\n    setDimension(\n      Math.min(\n        document.documentElement.clientWidth,\n        document.documentElement.clientHeight\n      )\n    );\n    setCards(shuffleCards());\n  }, []);\n\n  const handleStartClick = () => {\n    setStarted(true);\n  };\n\n  const handlePlayAgainClick = () => {\n    window.location.reload();\n  };\n\n  const handleCardClick = id => {\n    setDisabled(true);\n    if (clicked.length === 0) {\n      setClicked([id]);\n      setDisabled(false);\n      return;\n    } else {\n      if (sameCardClicked(id)) return;\n      setClicked([...clicked, id]);\n      if (isMatch(id)) {\n        resetCards();\n      } else {\n        setTimeout(resetCards, 1000);\n      }\n    }\n  };\n\n  const sameCardClicked = id => clicked.includes(id);\n\n  const isMatch = id => {\n    let clickedCardOne = cards.find(card => card.id === id);\n    let clickedCardTwo = cards.find(card => clicked[0] === card.id);\n    if (clickedCardOne.type === clickedCardTwo.type) {\n      setSolved([...solved, clicked[0], id]);\n      setNumMatches(numMatches + 1);\n      return true;\n    }\n  };\n\n  const resetCards = () => {\n    setClicked([]);\n    setDisabled(false);\n  };\n\n  if (started === false) {\n    return <StartPage handleStartClick={handleStartClick} />;\n  }\n\n  if (numMatches === 17) {\n    return <GameWon handlePlayAgainClick={handlePlayAgainClick} />;\n  }\n\n  return (\n    <div>\n      <div>\n        <GameBoard\n          dimension={dimension}\n          cards={cards}\n          clicked={clicked}\n          handleCardClick={handleCardClick}\n          disabled={disabled}\n          solved={solved}\n          numMatches={numMatches}\n        />\n      </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}